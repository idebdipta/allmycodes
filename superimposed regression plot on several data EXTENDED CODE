import numpy as np
import matplotlib.pyplot as plt
import operator

import matplotlib.pylab as pylab

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import PolynomialFeatures


params = {'legend.fontsize': 'x-large',
          'figure.figsize': (40, 15),
         'axes.labelsize': 'x-large',
         'axes.titlesize':'x-large',
         'xtick.labelsize':'x-large',
         'ytick.labelsize':'x-large'}
pylab.rcParams.update(params)

fig = plt.figure(figsize=(16,10))

# note this: you can skip rows!
my_data = np.genfromtxt('superimposedBankPEdataw0wihtouttweak.csv', delimiter=',',skip_header=1)
x1 = my_data[:,0]
x2 = my_data[:,2]
x3 = my_data[:,4]
x4 = my_data[:,6]
x5 = my_data[:,8]
x6 = my_data[:,10]
x7 = my_data[:,12]
x8 = my_data[:,14]
x9 = my_data[:,16]
x10 = my_data[:,18]
x11 = my_data[:,20]
x12 = my_data[:,22]
x13 = my_data[:,24]

y1 = my_data[:,1]
y2 = my_data[:,3]
y3 = my_data[:,5]
y4 = my_data[:,7]
y5 = my_data[:,9]
y6 = my_data[:,11]
y7 = my_data[:,13]
y8 = my_data[:,15]
y9 = my_data[:,17]
y10 = my_data[:,19]
y11 = my_data[:,21]
y12 = my_data[:,23]
y13 = my_data[:,25]
#y14 = my_data[:,9]

#plt.scatter(x1,y1, color = 'grey')
#plt.scatter(x2,y2, color = 'grey')
#plt.scatter(x3,y3, color = 'grey')
#plt.scatter(x4,y4, color = 'grey')
#plt.scatter(x5,y5, color = 'grey')
#plt.scatter(x6,y6, color = 'grey')
#plt.scatter(x7,y7, color = 'grey')
#plt.scatter(x8,y8, color = 'grey')
#plt.scatter(x9,y9, color = 'grey')
#plt.scatter(x10,y10, color = 'grey')
#plt.scatter(x11,y11, color = 'grey')
#plt.scatter(x12,y12, color = 'grey')
#plt.scatter(x13,y13, color = 'grey')



# transforming the data to include another axis
x1 = x1[:, np.newaxis]
x2 = x2[:, np.newaxis]
x3 = x3[:, np.newaxis]
x4 = x4[:, np.newaxis]
x5 = x5[:, np.newaxis]
x6 = x6[:, np.newaxis]
x7 = x7[:, np.newaxis]
x8 = x8[:, np.newaxis]
x9 = x9[:, np.newaxis]
x10 = x10[:, np.newaxis]
x11 = x11[:, np.newaxis]
x12 = x12[:, np.newaxis]
x13 = x13[:, np.newaxis]

y1 = y1[:, np.newaxis]
y2 = y2[:, np.newaxis]
y3 = y3[:, np.newaxis]
y4 = y4[:, np.newaxis]
y5 = y5[:, np.newaxis]
y6 = y6[:, np.newaxis]
y7 = y7[:, np.newaxis]
y8 = y8[:, np.newaxis]
y9 = y9[:, np.newaxis]
y10 = y10[:, np.newaxis]
y11 = y11[:, np.newaxis]
y12 = y12[:, np.newaxis]
y13 = y13[:, np.newaxis]


polynomial_features1 = PolynomialFeatures(degree=3)
x1_poly = polynomial_features1.fit_transform(x1)
polynomial_features2 = PolynomialFeatures(degree=3)
x2_poly = polynomial_features2.fit_transform(x2)
polynomial_features3 = PolynomialFeatures(degree=3)
x3_poly = polynomial_features3.fit_transform(x3)
polynomial_features4 = PolynomialFeatures(degree=3)
x4_poly = polynomial_features4.fit_transform(x4)
polynomial_features5 = PolynomialFeatures(degree=3)
x5_poly = polynomial_features5.fit_transform(x5)
polynomial_features6 = PolynomialFeatures(degree=3)
x6_poly = polynomial_features6.fit_transform(x6)
polynomial_features7 = PolynomialFeatures(degree=3)
x7_poly = polynomial_features7.fit_transform(x7)
polynomial_features8 = PolynomialFeatures(degree=3)
x8_poly = polynomial_features8.fit_transform(x8)
polynomial_features9 = PolynomialFeatures(degree=3)
x9_poly = polynomial_features9.fit_transform(x9)
polynomial_features10 = PolynomialFeatures(degree=3)
x10_poly = polynomial_features10.fit_transform(x10)
polynomial_features11 = PolynomialFeatures(degree=3)
x11_poly = polynomial_features11.fit_transform(x11)
polynomial_features12 = PolynomialFeatures(degree=3)
x12_poly = polynomial_features12.fit_transform(x12)
polynomial_features13 = PolynomialFeatures(degree=3)
x13_poly = polynomial_features13.fit_transform(x13)



model1 = LinearRegression()
model1.fit(x1_poly, y1)
y1_poly_pred = model1.predict(x1_poly)

model2 = LinearRegression()
model2.fit(x2_poly, y2)
y2_poly_pred = model2.predict(x2_poly)

model3 = LinearRegression()
model3.fit(x3_poly, y3)
y3_poly_pred = model3.predict(x3_poly)

model4 = LinearRegression()
model4.fit(x4_poly, y4)
y4_poly_pred = model4.predict(x4_poly)

model5 = LinearRegression()
model5.fit(x5_poly, y5)
y5_poly_pred = model5.predict(x5_poly)


model6 = LinearRegression()
model6.fit(x6_poly, y6)
y6_poly_pred = model6.predict(x6_poly)

model7 = LinearRegression()
model7.fit(x7_poly, y7)
y7_poly_pred = model7.predict(x7_poly)

model8 = LinearRegression()
model8.fit(x8_poly, y8)
y8_poly_pred = model8.predict(x8_poly)

model9 = LinearRegression()
model9.fit(x9_poly, y9)
y9_poly_pred = model9.predict(x9_poly)

model10 = LinearRegression()
model10.fit(x10_poly, y10)
y10_poly_pred = model10.predict(x10_poly)

model11 = LinearRegression()
model11.fit(x11_poly, y11)
y11_poly_pred = model11.predict(x11_poly)

model12 = LinearRegression()
model12.fit(x12_poly, y12)
y12_poly_pred = model2.predict(x12_poly)

model13 = LinearRegression()
model13.fit(x13_poly, y13)
y13_poly_pred = model13.predict(x13_poly)


print (model1.coef_)
print (model2.coef_)
print (model3.coef_)
print (model4.coef_)
print (model5.coef_)


rmse1 = np.sqrt(mean_squared_error(y1,y1_poly_pred))
r21 = r2_score(y1,y1_poly_pred)
rmse2 = np.sqrt(mean_squared_error(y2,y2_poly_pred))
r22 = r2_score(y2,y2_poly_pred)
rmse3 = np.sqrt(mean_squared_error(y3,y3_poly_pred))
r23 = r2_score(y3,y3_poly_pred)
rmse4 = np.sqrt(mean_squared_error(y4,y4_poly_pred))
r24 = r2_score(y4,y4_poly_pred)
rmse5 = np.sqrt(mean_squared_error(y5,y5_poly_pred))
r25 = r2_score(y5,y5_poly_pred)

print(rmse1)
print(r21)
print(rmse2)
print(r22)
print(rmse3)
print(r23)
print(rmse4)
print(r24)
print(rmse5)
print(r25)

#rmse = np.sqrt(mean_squared_error(y1,y1_poly_pred))
#r2 = r2_score(y1,y1_poly_pred)
#print(rmse)
#print(r2)

#r2 should be as close to 1 (gives kinda confidence value
#r2 is a measure of standard deviation

sort_axis1 = operator.itemgetter(0)
sorted_zip1 = sorted(zip(x1,y1_poly_pred), key=sort_axis1)
x1, y1_poly_pred = zip(*sorted_zip1)
plt.plot(x1, y1_poly_pred, label="offset = 200", linewidth = '3')


sort_axis2 = operator.itemgetter(0)
sorted_zip2 = sorted(zip(x2,y2_poly_pred), key=sort_axis2)
x2, y2_poly_pred = zip(*sorted_zip2)
plt.plot(x2, y2_poly_pred, label="offset = 100", linewidth = '3')

sort_axis3 = operator.itemgetter(0)
sorted_zip3 = sorted(zip(x3,y3_poly_pred), key=sort_axis3)
x3, y3_poly_pred = zip(*sorted_zip3)
plt.plot(x3, y3_poly_pred, label="offset = 0", linewidth = '3')

sort_axis4 = operator.itemgetter(0)
sorted_zip4 = sorted(zip(x4,y4_poly_pred), key=sort_axis4)
x4, y4_poly_pred = zip(*sorted_zip4)
plt.plot(x4, y4_poly_pred, label="offset = -100", linewidth = '3')

sort_axis5 = operator.itemgetter(0)
sorted_zip5 = sorted(zip(x5,y5_poly_pred), key=sort_axis5)
x5, y5_poly_pred = zip(*sorted_zip5)
plt.plot(x5, y5_poly_pred, label="offset = -200", linewidth = '3')

sort_axis6 = operator.itemgetter(0)
sorted_zip6 = sorted(zip(x6,y6_poly_pred), key=sort_axis6)
x6, y6_poly_pred = zip(*sorted_zip6)
plt.plot(x6, y6_poly_pred, label="offset = 200", linewidth = '3')


sort_axis7 = operator.itemgetter(0)
sorted_zip7 = sorted(zip(x7,y7_poly_pred), key=sort_axis7)
x7, y7_poly_pred = zip(*sorted_zip7)
plt.plot(x7, y7_poly_pred, label="offset = 100", linewidth = '3')

sort_axis8 = operator.itemgetter(0)
sorted_zip8 = sorted(zip(x8,y8_poly_pred), key=sort_axis8)
x8, y8_poly_pred = zip(*sorted_zip8)
plt.plot(x8, y8_poly_pred, label="offset = 0", linewidth = '3')

sort_axis9 = operator.itemgetter(0)
sorted_zip9 = sorted(zip(x9,y9_poly_pred), key=sort_axis9)
x9, y9_poly_pred = zip(*sorted_zip9)
plt.plot(x9, y9_poly_pred, label="offset = -100", linewidth = '3')

sort_axis10 = operator.itemgetter(0)
sorted_zip10 = sorted(zip(x10,y10_poly_pred), key=sort_axis10)
x10, y10_poly_pred = zip(*sorted_zip10)
plt.plot(x10, y10_poly_pred, label="offset = -200", linewidth = '3')

sort_axis11 = operator.itemgetter(0)
sorted_zip11 = sorted(zip(x11,y11_poly_pred), key=sort_axis11)
x11, y11_poly_pred = zip(*sorted_zip11)
plt.plot(x11, y11_poly_pred, label="offset = 200", linewidth = '3')


sort_axis12 = operator.itemgetter(0)
sorted_zip12 = sorted(zip(x12,y12_poly_pred), key=sort_axis12)
x12, y12_poly_pred = zip(*sorted_zip12)
plt.plot(x12, y12_poly_pred, label="offset = 100", linewidth = '3')

sort_axis13 = operator.itemgetter(0)
sorted_zip13 = sorted(zip(x13,y13_poly_pred), key=sort_axis13)
x13, y13_poly_pred = zip(*sorted_zip13)
plt.plot(x13, y13_poly_pred, label="offset = 0", linewidth = '3')


plt.title('Superimposed models of different offsets (-200 to +200), 2nd order polynomial')
plt.xlabel('Days |T-t*|')
plt.ylabel("Option value")

#plt.legend()
plt.grid()
plt.show()
